// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: todos.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (todo, created_on) VALUES ($1, NOW()) RETURNING id, todo, created_on, user_id
`

func (q *Queries) CreateTodo(ctx context.Context, todo string) (Todo, error) {
	row := q.db.QueryRow(ctx, createTodo, todo)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Todo,
		&i.CreatedOn,
		&i.UserID,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTodo, id)
	return err
}

const listTodos = `-- name: ListTodos :many
SELECT id, todo, created_on FROM todos
`

type ListTodosRow struct {
	ID        int32
	Todo      string
	CreatedOn pgtype.Timestamp
}

func (q *Queries) ListTodos(ctx context.Context) ([]ListTodosRow, error) {
	rows, err := q.db.Query(ctx, listTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTodosRow
	for rows.Next() {
		var i ListTodosRow
		if err := rows.Scan(&i.ID, &i.Todo, &i.CreatedOn); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
